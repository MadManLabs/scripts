<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="WMS Untiled" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="GEOSERVER_PATH" elementType="Argument">
            <stringProp name="Argument.name">GEOSERVER_PATH</stringProp>
            <stringProp name="Argument.value">/geoserver/bev/wms</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WPS1" elementType="Argument">
            <stringProp name="Argument.name">WPS1</stringProp>
            <stringProp name="Argument.value">10.1.23.21</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${WPS1}</stringProp>
        <stringProp name="HTTPSampler.port">8080</stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">/geoserver/ows?service=wps</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">http://${WPS1}:8080/geoserver/ows?service=wps</stringProp>
            <stringProp name="Authorization.username">loginusername</stringProp>
            <stringProp name="Authorization.password">loginpassword</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
        </collectionProp>
      </AuthManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/xml</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="delimiter">;</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">wps-1000px02.csv</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">width1000px02,height1000px02,bbox1000px02</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="filename">wps-5000px02.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">width5000px02,height5000px02,bbox5000px02</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">;</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="filename">wps-15000px02.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">width15000px02,height15000px02,bbox15000px02</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">;</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="filename">wps-25000px02.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">width25000px02,height25000px02,bbox25000px02</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">;</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="filename">wps-35000px02.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">width35000px02,height35000px02,bbox35000px02</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">;</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="1" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">12</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1499347017000</longProp>
        <longProp name="ThreadGroup.end_time">1499347017000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#xd;
&lt;wps:Execute xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&#xd;
xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot; xmlns:ows=&quot;http://www.opengis.net/ows/1.1&quot;&#xd;
xmlns:wcs=&quot;http://www.opengis.net/wcs/1.1.1&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; service=&quot;WPS&quot; version=&quot;1.0.0&quot;&#xd;
xmlns:wps=&quot;http://www.opengis.net/wps/1.0.0&quot;&gt;&#xd;
&lt;ows:Identifier&gt;gs:Download&lt;/ows:Identifier&gt;&#xd;
&lt;wps:DataInputs&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;layerName&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;bev:deflate&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;outputFormat&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;image/tiff&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;targetCRS&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;EPSG:31255&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;RoiCRS&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;EPSG:31255&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;ROI&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:ComplexData mimeType=&quot;application/wkt&quot;&gt;POLYGON ((${bbox}))&lt;/wps:ComplexData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;cropToROI&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;false&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;selectedBands&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;0&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;selectedBands&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;1&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;selectedBands&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;2&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;/wps:DataInputs&gt;&#xd;
&lt;wps:ResponseForm&gt;&#xd;
&lt;wps:RawDataOutput mimeType=&quot;application/zip&quot;&gt;&#xd;
&lt;ows:Identifier&gt;result&lt;/ows:Identifier&gt;&#xd;
&lt;/wps:RawDataOutput&gt;&#xd;
&lt;/wps:ResponseForm&gt;&#xd;
&lt;/wps:Execute&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="2" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">32</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1499347017000</longProp>
        <longProp name="ThreadGroup.end_time">1499347017000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#xd;
&lt;wps:Execute xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&#xd;
xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot; xmlns:ows=&quot;http://www.opengis.net/ows/1.1&quot;&#xd;
xmlns:wcs=&quot;http://www.opengis.net/wcs/1.1.1&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; service=&quot;WPS&quot; version=&quot;1.0.0&quot;&#xd;
xmlns:wps=&quot;http://www.opengis.net/wps/1.0.0&quot;&gt;&#xd;
&lt;ows:Identifier&gt;gs:Download&lt;/ows:Identifier&gt;&#xd;
&lt;wps:DataInputs&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;layerName&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;bev:deflate&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;outputFormat&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;image/tiff&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;targetCRS&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;EPSG:31255&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;RoiCRS&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;EPSG:31255&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;ROI&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:ComplexData mimeType=&quot;application/wkt&quot;&gt;POLYGON ((${bbox}))&lt;/wps:ComplexData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;cropToROI&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;false&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;selectedBands&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;0&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;selectedBands&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;1&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;selectedBands&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;2&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;/wps:DataInputs&gt;&#xd;
&lt;wps:ResponseForm&gt;&#xd;
&lt;wps:RawDataOutput mimeType=&quot;application/zip&quot;&gt;&#xd;
&lt;ows:Identifier&gt;result&lt;/ows:Identifier&gt;&#xd;
&lt;/wps:RawDataOutput&gt;&#xd;
&lt;/wps:ResponseForm&gt;&#xd;
&lt;/wps:Execute&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="4" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">32</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1499347017000</longProp>
        <longProp name="ThreadGroup.end_time">1499347017000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#xd;
&lt;wps:Execute xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&#xd;
xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot; xmlns:ows=&quot;http://www.opengis.net/ows/1.1&quot;&#xd;
xmlns:wcs=&quot;http://www.opengis.net/wcs/1.1.1&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; service=&quot;WPS&quot; version=&quot;1.0.0&quot;&#xd;
xmlns:wps=&quot;http://www.opengis.net/wps/1.0.0&quot;&gt;&#xd;
&lt;ows:Identifier&gt;gs:Download&lt;/ows:Identifier&gt;&#xd;
&lt;wps:DataInputs&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;layerName&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;bev:deflate&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;outputFormat&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;image/tiff&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;targetCRS&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;EPSG:31255&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;RoiCRS&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;EPSG:31255&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;ROI&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:ComplexData mimeType=&quot;application/wkt&quot;&gt;POLYGON ((${bbox}))&lt;/wps:ComplexData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;cropToROI&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;false&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;selectedBands&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;0&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;selectedBands&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;1&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;selectedBands&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;2&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;/wps:DataInputs&gt;&#xd;
&lt;wps:ResponseForm&gt;&#xd;
&lt;wps:RawDataOutput mimeType=&quot;application/zip&quot;&gt;&#xd;
&lt;ows:Identifier&gt;result&lt;/ows:Identifier&gt;&#xd;
&lt;/wps:RawDataOutput&gt;&#xd;
&lt;/wps:ResponseForm&gt;&#xd;
&lt;/wps:Execute&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="8" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">32</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">8</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1499347017000</longProp>
        <longProp name="ThreadGroup.end_time">1499347017000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="8" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#xd;
&lt;wps:Execute xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&#xd;
xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot; xmlns:ows=&quot;http://www.opengis.net/ows/1.1&quot;&#xd;
xmlns:wcs=&quot;http://www.opengis.net/wcs/1.1.1&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; service=&quot;WPS&quot; version=&quot;1.0.0&quot;&#xd;
xmlns:wps=&quot;http://www.opengis.net/wps/1.0.0&quot;&gt;&#xd;
&lt;ows:Identifier&gt;gs:Download&lt;/ows:Identifier&gt;&#xd;
&lt;wps:DataInputs&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;layerName&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;bev:deflate&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;outputFormat&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;image/tiff&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;targetCRS&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;EPSG:31255&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;RoiCRS&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;EPSG:31255&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;ROI&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:ComplexData mimeType=&quot;application/wkt&quot;&gt;POLYGON ((${bbox}))&lt;/wps:ComplexData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;cropToROI&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;false&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;selectedBands&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;0&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;selectedBands&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;1&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;selectedBands&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;2&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;/wps:DataInputs&gt;&#xd;
&lt;wps:ResponseForm&gt;&#xd;
&lt;wps:RawDataOutput mimeType=&quot;application/zip&quot;&gt;&#xd;
&lt;ows:Identifier&gt;result&lt;/ows:Identifier&gt;&#xd;
&lt;/wps:RawDataOutput&gt;&#xd;
&lt;/wps:ResponseForm&gt;&#xd;
&lt;/wps:Execute&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="16" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">32</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">16</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1499347017000</longProp>
        <longProp name="ThreadGroup.end_time">1499347017000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="16" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#xd;
&lt;wps:Execute xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&#xd;
xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot; xmlns:ows=&quot;http://www.opengis.net/ows/1.1&quot;&#xd;
xmlns:wcs=&quot;http://www.opengis.net/wcs/1.1.1&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; service=&quot;WPS&quot; version=&quot;1.0.0&quot;&#xd;
xmlns:wps=&quot;http://www.opengis.net/wps/1.0.0&quot;&gt;&#xd;
&lt;ows:Identifier&gt;gs:Download&lt;/ows:Identifier&gt;&#xd;
&lt;wps:DataInputs&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;layerName&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;bev:deflate&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;outputFormat&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;image/tiff&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;targetCRS&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;EPSG:31255&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;RoiCRS&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;EPSG:31255&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;ROI&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:ComplexData mimeType=&quot;application/wkt&quot;&gt;POLYGON ((${bbox}))&lt;/wps:ComplexData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;cropToROI&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;false&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;selectedBands&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;0&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;selectedBands&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;1&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;wps:Input&gt;&#xd;
&lt;ows:Identifier&gt;selectedBands&lt;/ows:Identifier&gt;&#xd;
&lt;wps:Data&gt;&#xd;
&lt;wps:LiteralData&gt;2&lt;/wps:LiteralData&gt;&#xd;
&lt;/wps:Data&gt;&#xd;
&lt;/wps:Input&gt;&#xd;
&lt;/wps:DataInputs&gt;&#xd;
&lt;wps:ResponseForm&gt;&#xd;
&lt;wps:RawDataOutput mimeType=&quot;application/zip&quot;&gt;&#xd;
&lt;ows:Identifier&gt;result&lt;/ows:Identifier&gt;&#xd;
&lt;/wps:RawDataOutput&gt;&#xd;
&lt;/wps:ResponseForm&gt;&#xd;
&lt;/wps:Execute&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ContentTypeCheck" enabled="true">
        <collectionProp name="Asserion.test_strings">
          <stringProp name="-1180248210">Content-Type: application/zip</stringProp>
        </collectionProp>
        <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
        <boolProp name="Assertion.assume_success">false</boolProp>
        <intProp name="Assertion.test_type">2</intProp>
      </ResponseAssertion>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="RespTimeGraph.interval">10</stringProp>
        <intProp name="RespTimeGraph.linestrockwidth">0</intProp>
        <intProp name="RespTimeGraph.lineshapepoint">4</intProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="4" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">250</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1499347017000</longProp>
        <longProp name="ThreadGroup.end_time">1499347017000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="bbox" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${bbox}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">bbox</stringProp>
              </elementProp>
              <elementProp name="height" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${height}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">height</stringProp>
              </elementProp>
              <elementProp name="width" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${width}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">width</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="8" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">250</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">8</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1499347017000</longProp>
        <longProp name="ThreadGroup.end_time">1499347017000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="8" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="bbox" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${bbox}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">bbox</stringProp>
              </elementProp>
              <elementProp name="height" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${height}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">height</stringProp>
              </elementProp>
              <elementProp name="width" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${width}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">width</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="16" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">200</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">16</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1499347017000</longProp>
        <longProp name="ThreadGroup.end_time">1499347017000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="16" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="bbox" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${bbox}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">bbox</stringProp>
              </elementProp>
              <elementProp name="height" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${height}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">height</stringProp>
              </elementProp>
              <elementProp name="width" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${width}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">width</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="32" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">200</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">32</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1499347017000</longProp>
        <longProp name="ThreadGroup.end_time">1499347017000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="32" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="bbox" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${bbox}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">bbox</stringProp>
              </elementProp>
              <elementProp name="height" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${height}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">height</stringProp>
              </elementProp>
              <elementProp name="width" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${width}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">width</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
